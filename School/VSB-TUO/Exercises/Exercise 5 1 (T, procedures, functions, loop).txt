########## Create a procedure for inserting

CREATE TABLE Student (
login    CHAR(6) PRIMARY KEY,
fname    VARCHAR(30) NOT NULL,
lname    VARCHAR(50) NOT NULL,
email    VARCHAR(50) NOT NULL);

CREATE PROCEDURE PAddStudent (@p_login varchar(7), @p_fname varchar(30), @p_lname varchar(30), @p_email varchar(50), @p_ret varchar(5))
AS BEGIN
	BEGIN TRY
		INSERT INTO Student values (@p_login, @p_fname, @p_lname, @p_email);
		SET @p_ret = 'ok';
	END TRY
	BEGIN CATCH
		SET @p_ret = 'error';
	END CATCH
	print @p_ret;
END



########## Procedure for moving from one table to another

CREATE TABLE Teacher (
login CHAR(6) NOT NULL PRIMARY KEY,
fname VARCHAR(30) NOT NULL,
lname VARCHAR(50) NOT NULL,
email VARCHAR(50) NOT NULL,
department INT NOT NULL,
specialization VARCHAR(30) NULL);

CREATE PROCEDURE StudentBecomeTeacher (@p_login char(6), @p_department int)
AS BEGIN
	INSERT INTO Teacher (login, fname, lname, email, department, specialization)
		SELECT *, @p_department, NULL from Student where login = @p_login;
	DELETE FROM Student where login = @p_login;
END



########## Procedure for adding students by name and tallness

CREATE PROCEDURE AddStudent2 (@p_fname varchar(30), @p_lname varchar(50), @p_tallness int)
AS BEGIN
	DECLARE @v_login char(6), @v_email varchar(50), @v_tallness int;
	SET @v_login = SUBSTRING(LOWER(@p_lname), 1, 3) + '000';
	SET @v_email = @v_login + '@vsb.cz';
	INSERT INTO Student values (@v_login, @p_fname, @p_lname, @v_email, @p_tallness);
END

EXEC AddStudent2 'Jiri', 'Fiser', 1234;



########## Procedure for checking whether a student is tall

ALTER TABLE Student ADD isTall BIT;

CREATE PROCEDURE IsStudentTall (@p_login char(6))
AS BEGIN
	DECLARE @v_isTall BIT, @v_avg INT, @v_tallness INT;
	SELECT @v_tallness = tallness FROM Student WHERE login = @p_login;
	SELECT @v_avg = avg(tallness) FROM Student WHERE login = @p_login;
	IF @v_tallness > @v_avg
		SET @v_isTall = 1;
	ELSE
		SET @v_isTall = 0;
	
	UPDATE Student SET isTall = @v_isTall WHERE login = @p_login;
END



########## Function for checking if record exists

CREATE FUNCTION LoginExist (@p_login char(6))
RETURNS BIT
AS BEGIN
	DECLARE @v_ret BIT;
	IF EXISTS(SELECT * FROM Student WHERE login = @p_login)
		SET @v_ret 1;
	ELSE
		SET @v_ret 0;

	RETURN @v_ret;
END



########## Upgrading addstudent for looping logins

ALTER PROCEDURE AddStudent2 (@p_fname varchar(30), @p_lname varchar(50), @p_tallness int)
AS BEGIN
	DECLARE @v_login char(6), @v_email varchar(50), @v_tallness int, @v_i int;
	SET @v_login = SUBSTRING(LOWER(@p_lname), 1, 3) + '000';
	SET @v_email = @v_login + '@vsb.cz';
	WHILE @v_i < 1000 BEGIN
		IF dbo.LoginExist(@v_login) = 0 BEGIN
			SELECT @v_login = SUBSTRING(LOWER(@p_lname), 1, 3) + RIGHT('000' + CAST(@v_i AS char(3)), 3);
			INSERT INTO Student values (@v_login, @p_fname, @p_lname, @v_email, @p_tallness, 0);
			BREAK;
		END ELSE
			SET @v_i = @v_i + 1;
	END
	EXEC IsStudentTall @v_login;
END